#!/bin/bash

set -euo pipefail

if [ "$STACK" != "heroku-16" ]; then
  echo "Stack is not supported: $STACK"
  exit 1
fi

BUILD_DIR=${1:-}
CACHE_DIR="${2:-}/neon"
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Taken from https://devcenter.heroku.com/articles/buildpack-api
if [ ! -z "$ENV_DIR" ] && [ -d "$ENV_DIR" ]; then
  env_blacklist_regex='^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'
  for e in $(ls $ENV_DIR); do
    echo "$e" | grep -qvE "$env_blacklist_regex" &&
    export "$e=$(cat $ENV_DIR/$e)"
    :
  done
fi

export PREFIX="$BUILD_DIR/.heroku/neon"
export RUSTUP_HOME="$CACHE_DIR/rustup"
export CARGO_HOME="$CACHE_DIR/cargo"
export PATH="$CARGO_HOME/bin:$PREFIX/bin:$PATH"

mkdir -p "$CACHE_DIR" "$PREFIX/bin"
cd "$CACHE_DIR"

echo -n "-----> Looking for jq: "
if which jq 2>/dev/null; then
  true
else
  echo "not found"
  echo "-----> Installing jq"
  curl "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" -sSfL \
    > "$PREFIX/bin/jq"
  chmod +x "$PREFIX/bin/jq"
fi

engine() {
  val="$(jq -r ".engines.$1" "$BUILD_DIR/package.json")"
  if [ "$val" = "null" ]; then
    if [ -z "$2" ]; then
      return 1
    else
      echo -n "$2"
    fi
  else
    echo -n "$val"
  fi
}

resolve() {
  curl "https://semver.io/node/resolve/$1" -sSf
}

node_version="$(resolve $(engine node lts))"
npm_version="$(engine npm latest)"
rust_version="$(engine rust stable)"

echo "-----> Installing node"
mkdir -p "$PREFIX"
curl "https://cdn.jsdelivr.net/gh/isaacs/nave/nave.sh" -sSfL > nave.sh
export SHELL="/bin/bash"
chmod u+x nave.sh
./nave.sh usemain "$node_version"
rm nave.sh

echo "-----> Installing npm"
npm install --global "npm@$npm_version"

echo -n "-----> Looking for rustup: "
if which rustup 2>/dev/null; then
  echo "-----> Updating rust"
  rustup self update
  rustup update "$rust_version"
  rustup default "$rust_version"
else
  echo "not found"
  echo "-----> Installing rust"
  curl https://sh.rustup.rs -sSfL > rustup.sh
  chmod u+x rustup.sh
  ./rustup.sh -y --default-toolchain="$rust_version"
  rm rustup.sh
fi

echo "-----> Using node $(node --version | cut -c2-)"
echo "-----> Using npm $(npm --version)"
echo "-----> Using $(rustc --version)"
echo "-----> Using $(cargo --version)"

cd "$BUILD_DIR"
if [ ! -f Procfile ]; then
  echo "-----> Writing default Procfile"
  echo "web: npm start" > Procfile
fi

echo "-----> Building app"
npm install

set +u
if [ "$TRAVIS" == "true" ] && [ "$CI" == "true" ]; then
  echo "-----> Looks like we're in Travis"
  echo "-----> Running app"
  npm start
fi
